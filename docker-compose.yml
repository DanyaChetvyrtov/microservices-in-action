services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres-container
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: license_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      PGDATA: /data/postgres
    networks:
      - microservices-net
    volumes:
      - postgres-volume:/data/postgres
    restart: unless-stopped

  vault:
    image: vault:1.13.3
    container_name: vault-container
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: myroot
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak-container
    command: start-dev  # <-- Это критически важно добавить
#    restart: always
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_PROXY: edge
      KC_HOSTNAME: localhost
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak_db
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: root
    ports:
      - "8300:8080"
    networks:
      microservices-net:
        aliases:
          - "keycloak"

  kafka:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"  # Для внешних подключений
      - "9093:9093"  # Для контроллера
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_BROKER_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_LISTENERS: 'INTERNAL://kafka:29092,CONTROLLER://kafka:9093,EXTERNAL://0.0.0.0:9092'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka:29092,EXTERNAL://localhost:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: 'EmptNWtoR4GGWx-BH6nGLQ'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
    volumes:
      - ./kafka-data:/var/lib/kafka/data
    networks:
      - microservices-net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-cluster-ui
    ports:
      - "8880:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    depends_on:
      - kafka
    networks:
      - microservices-net

  redis-server:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      microservices-net:
        aliases:
          - "redis"

  elasticsearch:
    image: elasticsearch:8.7.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - microservices-net

  logstash:
    image: logstash:8.7.0
    container_name: logstash
    volumes:
      - ./docker/config:/usr/share/logstash/config
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    environment:
      - LS_JAVA_OPTS=-Xmx1g -Xms1g
    depends_on:
      - elasticsearch
    ports:
      - "5000:5000" # Для приема логов в формате JSON
      - "5001:5001" # Для приема логов в формате Beats
    networks:
      - microservices-net

  kibana:
    image: kibana:8.7.0
    container_name: kibana
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - microservices-net

########## main ms's ###########################################################################

  config-server:
    image: danilchet/config-server-ms
    container_name: config-server-container
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8071:8071"
    networks:
      - microservices-net

  eureka-server:
    image: danilchet/eureka-server-ms
    container_name: eureka-server-container
    ports:
      - "8761:8761"
    networks:
      - microservices-net
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8071
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8071
      - "eureka.client.service-url.defaultZone=http://localhost:8761/eureka/"
    depends_on:
      - config-server

  gateway:
    image: danilchet/gateway-ms
    container_name: gateway-container
    ports:
      - "8072:8072"
    networks:
      - microservices-net
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8071
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8071
      - "eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/"
    depends_on:
      - config-server

  license-ms:
    image: danilchet/license-ms
    container_name: license-ms-container
    ports:
      - "8080:8080"
    networks:
      - microservices-net
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8071
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8071
      - "eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/"
    depends_on:
      - postgres
      - config-server
      - eureka-server


  organization-ms:
    image: danilchet/organization-ms
    container_name: organization-ms-container
    ports:
      - "8081:8081"
    networks:
      - microservices-net
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8071
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8071
      - "eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/"
    depends_on:
      - postgres
      - config-server
      - eureka-server

networks:
  microservices-net:
    driver: bridge
volumes:
  postgres-volume:
  es_data: